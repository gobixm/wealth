using Dapper;
using DataAccess.Pg;
using DotNet.Testcontainers.Builders;
using DotNet.Testcontainers.Configurations;
using DotNet.Testcontainers.Containers;
using FluentAssertions;
using Npgsql;

namespace DataAccess.Tests.Integration;

public sealed class PgUnitOfWorkTests : IAsyncLifetime
{
    private readonly PostgreSqlTestcontainer _dbContainer = new TestcontainersBuilder<PostgreSqlTestcontainer>()
        .WithDatabase(new PostgreSqlTestcontainerConfiguration
        {
            Database = "db",
            Password = "postgres",
            Username = "postgres"
        })
        .Build();


    public async Task InitializeAsync()
    {
        await _dbContainer.StartAsync();

        var connection = new NpgsqlConnection(_dbContainer.ConnectionString);
        await connection.ExecuteAsync(
            "create table foos (id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, name text) ");
    }

    public async Task DisposeAsync()
    {
        await _dbContainer.StopAsync();
    }

    [Fact]
    public async Task GetRepository_Repository_Created()
    {
        // arrange
        var unitOfWork = new PgUnitOfWork(new PgOptions(_dbContainer.ConnectionString), new PgRepositoryFactory(
            new PgRepositoryFactoryOptions()
                .RegisterRepository<ITestRepo, TestRepo>()));

        // act
        var repo = await unitOfWork.GetRepositoryAsync<ITestRepo>();
        var foo = await repo.CreateAsync("foo");
        await unitOfWork.CommitAsync();
        var anotherOfWork = new PgUnitOfWork(new PgOptions(_dbContainer.ConnectionString), new PgRepositoryFactory(
            new PgRepositoryFactoryOptions()
                .RegisterRepository<ITestRepo, TestRepo>()));
        var anotherRepo = await unitOfWork.GetRepositoryAsync<ITestRepo>();
        var deleted = await anotherRepo.DeleteAsync(foo.Id);
        await anotherOfWork.RollbackAsync();

        // assert
        foo.Name.Should().Be("foo");
        deleted.Should().Be(1);
    }

    private interface ITestRepo
    {
        Task<Foo> CreateAsync(string name);
        Task<int> DeleteAsync(int id);
    }

    private sealed class TestRepo : PgRepository, ITestRepo
    {
        public TestRepo(NpgsqlConnection connection) : base(connection)
        {
        }

        public async Task<Foo> CreateAsync(string name)
        {
            var res = await Connection.QueryAsync<Foo>("insert into foos (name) values (@name) returning *",
                new {name});
            return res.Single();
        }

        public async Task<int> DeleteAsync(int id)
        {
            return await Connection.ExecuteAsync("delete from foos where id = @id", new {id});
        }
    }

    private sealed record Foo(int Id, string Name);
}